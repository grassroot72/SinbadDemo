compositor_node DistortionSceneRenderingNode
{
    // rt_scene is used to render the scene
    // rt_distortion is the texture we will be rendering distortion objects. The texture is later used to postprocess the scene
    texture rt_scene target_width target_height PF_FLOAT16_RGBA depth_texture depth_format PF_D32_FLOAT depth_pool 2
    texture rt_distortion target_width target_height PF_FLOAT16_RGBA depth_texture depth_format PF_D32_FLOAT depth_pool 2
    
    target rt_scene
    {
        pass clear
        {
                colour_value 0.2 0.4 0.6 1
        }

        pass render_scene
        {
                //lod_update_list       off                                     //Turn Lod off?
                shadows         SinbadDemoShadowNode
                overlays        off
                rq_first        0
                rq_last         6
        }
    }
    
    target rt_distortion
    {
        pass clear
        {
                // Clear distortion texture to default values. R and G are representing distortion vectors along X and Y axis. A is controlling distortion strenght.
                colour_value 0.5 0.5 0 0
                buffers colour
        }
        
        //Render distortion to its own texture with render queue id 6
        pass render_scene
        {
                lod_update_list off
                overlays        off
                rq_first        6
                rq_last         7
        }
    }
        
    out 0 rt_scene
    out 1 rt_distortion
}

compositor_node DistortionRenderingNode
{
    in 0 rt_scene
    in 1 rt_distortion
    
    texture rt_output target_width target_height PF_R8G8B8A8
    
    target rt_output
    {
        pass clear
        {
            discard_only        true
        }

        pass render_quad
        {
            material Distortion/Quad
            input 0 rt_scene
            input 1 rt_distortion
        }
        
        pass render_scene
        {
            lod_update_list     off

            //Render Overlays
            overlays    off
            rq_first    254
            rq_last     255
        }
    }

    out 2 rt_output
}

compositor_node SmaaDistortionRenderingNode
{
    // from DistortionRenderingNode
    in 0 rt0

    texture rt1 target_width target_height PF_R8G8B8A8
        
    //Play nice with Multi-GPU setups. See Postprocessing sample.
    target rt1
    {
        pass clear
        {
            colour_value        0 1 0 1
            buffers             colour
            discard_only        true
        }
    }
        
    out 0 rt0
    out 1 rt1
}

compositor_node SmaaDistortionFinalComposition
{
        in 0 rt_output
        in 1 rtN

        target rt_output
        {
                //Play nice with Multi-GPU setups. See Postprocessing sample.
                pass clear
                {
                        colour_value    1 0 0 1
                        buffers                 colour
                        discard_only    true
                }

                pass render_quad
                {
                        material Ogre/Copy/4xFP32
                        input 0 rtN
                }

                pass render_scene
                {
                        lod_update_list off

                        //Render Overlays
                        overlays        on
                        rq_first        254
                        rq_last         255
                }
        }
}

workspace SmaaDistortionWorkspace
{
    connect DistortionSceneRenderingNode 0 DistortionRenderingNode 0
    connect DistortionSceneRenderingNode 1 DistortionRenderingNode 1
    
    connect DistortionRenderingNode 2 SmaaDistortionRenderingNode 0
    
    connect SmaaDistortionRenderingNode 0 SmaaNode 0
    connect SmaaDistortionRenderingNode 1 SmaaNode 1

    connect SmaaNode 0 SmaaDistortionFinalComposition 1
    connect_output SmaaDistortionFinalComposition 0
}
